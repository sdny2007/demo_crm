name: Demo_CRM CI/CD
# CI
# Controls when the workflow will run
on:
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

# CI
jobs:
  job1:
    name: CI - Unit Test
    runs-on: ubuntu-latest
    
    steps:
      # Checks out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Install Runner updates
      - name: Install updates
        run: sudo apt-get update

      # Install Yarn
      - name: Install next
        run: sudo npm install next

      # run the application
      - name: Install next
        run: |
              cd ./demo-crm-main
              nohup npm run dev &


      # Check if the application is up
      - name: Application check
        run: curl -XGET http://localhost:3000
  job2:
    name: CI - E2E  
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: job1
    # Set environment variables using secrets
 #   env:
  #    MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGODB_USERNAME }}
 #   MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
     
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4  

      # Run Docker Compose
      - name: Run docker compose file
        run: |
              cd ./demo-crm-main
              docker compose up -d
        
      # Wait 15 seconds for the application to start
      - name: Wait 10 seconds
        run: sleep 10
        
      # Check if application, database and nginx is up
      - name: Check - add a new customer 
        run: |
          response=$(curl -s -X POST http://localhost:80/api/clients -H "Content-Type: application/json" -d '{
            "name": "Shay Danny",
            "email": "shaydan@develeap.com",
            "company": "Develeap",
            "website": "https://shaydan.com"
          }')
          echo "Response from POST request: $response"
          if [[ "$response" != *"success"* ]]; then
            echo "Failed to add customer."
            exit 1
          fi

      - name: Check - show if the customer exists
        run: |
          response=$(curl -s http://localhost:80/api/clients)
          echo "Response from GET request: $response"
          # Check for the customer name in the response (ensure correct structure)
          if [[ "$response" == *"Shay Danny"* ]]; then
            echo "Customer 'Shay Danny' found. Continuing the job."
          else
            echo "Customer 'Shay Danny' does not exist. Failing the job."
            exit 1
          fi
      # Connect to ECR via access key
      - name: Connect to aws account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
      #  Push the app Image to ECR       
      - name: Push Docker image
        run: | 
              aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 886436956602.dkr.ecr.ap-south-1.amazonaws.com
              docker build -t demo_crm/app ./demo-crm-main
              docker tag demo_crm/app:latest 886436956602.dkr.ecr.ap-south-1.amazonaws.com/demo_crm/app:latest
              docker push 886436956602.dkr.ecr.ap-south-1.amazonaws.com/demo_crm/app:latest

# CD

  job3:
    name: CD - Deployment
    runs-on: ubuntu-latest
    
    steps:
      # Checks out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Install Runner updates
      - name: Install updates
        run: sudo apt-get update

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Connect to aws account
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
          
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region ap-south-1 --name shay-cluster

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash 

          
      - name: Add nginx-ingress repository
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx           

      
      - name: Deploy ingress controler
        run: |
          helm install my-ingress-nginx ingress-nginx/ingress-nginx             
