name: Demo_CRM CI/CD
# CI
# Controls when the workflow will run
on:
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

# CI
jobs:
  job1:
    name: CI - Unit Test
    runs-on: ubuntu-latest
    
    steps:
      # Checks out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Install Runner updates
      - name: Install updates
        run: sudo apt-get update

      # Install Yarn
      - name: Install next
        run: sudo npm install next

      # run the application
      - name: Install next
        run: |
              cd ./demo-crm-main
              nohup npm run dev &


      # Check if the application is up
      - name: Application check
        run: curl -XGET http://localhost:3000
  job2:
    name: CI - E2E  
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    needs: job1
    # Set environment variables using secrets
    env:
      MONGO_INITDB_ROOT_USERNAME: ${{ secrets.MONGODB_USERNAME }}
      MONGO_INITDB_ROOT_PASSWORD: ${{ secrets.MONGODB_PASSWORD }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Run Docker Compose
      - name: Run docker compose file
        run: |
              cd ./demo-crm-main
              docker compose up -d
        
      # Wait 15 seconds for the application to start
      - name: Wait 10 seconds
        run: sleep 10
        
      # Check if application, database and nginx is up
      - name: Check
        run: curl -XGET  -i http://localhost:80
        
      # Connect to ECR via access key
      - name: Connect to ECR
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1
      #  Push the app Image to ECR       
      - name: Tag and Push Docker image
        run: | 
             aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 886436956602.dkr.ecr.ap-south-1.amazonaws.com
             VERSION=$(date +%Y%m%d%H%M%S)-${GITHUB_SHA:0:7}
             docker tag entrytracker-app:latest 886436956602.dkr.ecr.ap-south-1.amazonaws.com/entrytracker/app:$VERSION
             docker push 886436956602.dkr.ecr.ap-south-1.amazonaws.com/entrytracker/app:$VERSION        
